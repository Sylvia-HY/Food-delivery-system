{"remainingRequest":"E:\\项目\\2022\\082601-外卖送餐\\管理后台前端\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\项目\\2022\\082601-外卖送餐\\管理后台前端\\src\\components\\WangEnduit\\index.vue?vue&type=style&index=0&id=557b6c3b&lang=scss&scoped=true&","dependencies":[{"path":"E:\\项目\\2022\\082601-外卖送餐\\管理后台前端\\src\\components\\WangEnduit\\index.vue","mtime":1634967165000},{"path":"E:\\项目\\2022\\082601-外卖送餐\\管理后台前端\\node_modules\\css-loader\\dist\\cjs.js","mtime":1641885191395},{"path":"E:\\项目\\2022\\082601-外卖送餐\\管理后台前端\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1642038070263},{"path":"E:\\项目\\2022\\082601-外卖送餐\\管理后台前端\\node_modules\\postcss-loader\\src\\index.js","mtime":1641885191858},{"path":"E:\\项目\\2022\\082601-外卖送餐\\管理后台前端\\node_modules\\sass-loader\\dist\\cjs.js","mtime":1641885203758},{"path":"E:\\项目\\2022\\082601-外卖送餐\\管理后台前端\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1641885170445},{"path":"E:\\项目\\2022\\082601-外卖送餐\\管理后台前端\\node_modules\\vue-loader\\lib\\index.js","mtime":1642038070263}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmVkaXRvciB7CiAgd2lkdGg6IDEwMCU7CiAgLy8gbWFyZ2luOiAwIGF1dG87CiAgcG9zaXRpb246IHJlbGF0aXZlOwogIHotaW5kZXg6IDA7CiAgLy8gbWF4LXdpZHRoOiA3MDBweDsKfQoudG9vbGJhciB7CiAgYm9yZGVyOiAxcHggc29saWQgI2NjYzsKfQoudGV4dCB7CiAgYm9yZGVyOiAxcHggc29saWQgI2NjYzsKICBoZWlnaHQ6IDQwMHB4Owp9Cg=="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/components/WangEnduit","sourcesContent":["<template>\n  <div class=\"editor\">\n    <div ref=\"toolbar\" class=\"toolbar\">\n    </div>\n    <div ref=\"editor\" class=\"text\" style=\"width:100%;overflow:hidden\">\n    </div>\n  </div>\n</template>\n\n<script>\nimport E from \"wangeditor\";\nexport default {\n  components: {},\n  data() {\n    return {\n      editor: null,\n      info_: null\n    };\n  },\n  model: {\n    prop: \"value\",\n    event: \"change\"\n  },\n  props: {\n    value: {\n      type: String,\n      default: \"\"\n    },\n    isClear: {\n      type: Boolean,\n      default: false\n    }\n  },\n  watch: {\n    isClear(val) {\n      // 触发清除文本域内容\n      if (val) {\n        this.editor.txt.clear();\n        this.info_ = null;\n      }\n    },\n    value: function(value) {\n      if (value !== this.editor.txt.html()) {\n        this.editor.txt.html(this.value);\n      }\n    }\n    //value为编辑框输入的内容，这里我监听了一下值，当父组件调用得时候，如果给value赋值了，子组件将会显示父组件赋给的值\n  },\n  created() {},\n  mounted() {\n    this.seteditor();\n    this.editor.txt.html(this.value);\n  },\n  beforeDestroy() {},\n  computed: {},\n  methods: {\n    seteditor() {\n      // http://192.168.2.125:8080/admin/storage/create\n      this.editor = new E(this.$refs.toolbar, this.$refs.editor);\n      //   this.editor.customConfig.debug = true //调试模式\n      this.editor.customConfig.uploadImgShowBase64 = false; // base 64 存储图片\n      this.editor.customConfig.uploadImgServer = process.env.VUE_APP_BASE_FILE; // 配置上传图片的服务器端地址\n      this.editor.customConfig.uploadImgParams = {\n        pathex: \"file\"\n      };\n      this.editor.customConfig.uploadImgHeaders = {}; // 自定义 header\n      this.editor.customConfig.uploadFileName = \"file\"; // 后端接受上传文件的参数名\n      this.editor.customConfig.uploadImgMaxSize = 4 * 1024 * 1024; // 将图片大小限制为 4M\n      this.editor.customConfig.uploadImgMaxLength = 1; // 限制一次最多上传 3 张图片\n      this.editor.customConfig.uploadImgTimeout = 3 * 60 * 1000; // 设置超时时间\n\n      // 配置菜单\n      this.editor.customConfig.menus = [\n        \"head\", // 标题\n        \"bold\", // 粗体\n        \"fontSize\", // 字号\n        \"fontName\", // 字体\n        \"italic\", // 斜体\n        \"underline\", // 下划线\n        \"strikeThrough\", // 删除线\n        \"foreColor\", // 文字颜色\n        \"backColor\", // 背景颜色\n        \"link\", // 插入链接\n        \"list\", // 列表\n        \"justify\", // 对齐方式\n        \"quote\", // 引用\n        \"emoticon\", // 表情\n        \"image\", // 插入图片\n        \"table\", // 表格\n        \"video\", // 插入视频\n        \"code\", // 插入代码\n        \"undo\", // 撤销\n        \"redo\", // 重复\n        \"fullscreen\" // 全屏\n      ];\n\n      this.editor.customConfig.uploadImgHooks = {\n        fail: (xhr, editor, result) => {\n          // 插入图片失败回调\n        },\n        success: (xhr, editor, result) => {\n          // 图片上传成功回调\n        },\n        timeout: (xhr, editor) => {\n          // 网络超时的回调\n        },\n        error: (xhr, editor) => {\n          // 图片上传错误的回调\n        },\n        customInsert: (insertImg, result, editor) => {\n          // 图片上传成功，插入图片的回调\n          //result为上传图片成功的时候返回的数据，这里我打印了一下发现后台返回的是data：[{url:\"路径的形式\"},...]\n          // console.log(result.data[0].url)\n          //insertImg()为插入图片的函数\n          //循环插入图片\n          // for (let i = 0; i < 1; i++) {\n          insertImg(result.data);\n          // }\n        }\n      };\n      this.editor.customConfig.onchange = html => {\n        this.info_ = html; // 绑定当前逐渐地值\n        this.$emit(\"change\", this.info_); // 将内容同步到父组件中\n      };\n      // 创建富文本编辑器\n      this.editor.create();\n    }\n  }\n};\n</script>\n\n<style lang='scss' scoped>\n.editor {\n  width: 100%;\n  // margin: 0 auto;\n  position: relative;\n  z-index: 0;\n  // max-width: 700px;\n}\n.toolbar {\n  border: 1px solid #ccc;\n}\n.text {\n  border: 1px solid #ccc;\n  height: 400px;\n}\n</style>"]}]}